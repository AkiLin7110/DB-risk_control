import pandas as pd
import requests
import shutil
from datetime import datetime, timedelta
import ddddocr
from IPython.display import Image
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
from pytrends.request import TrendReq
from tqdm import tqdm
import time
import numpy as np
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from wordcloud import WordCloud, STOPWORDS
import matplotlib.pyplot as plt
import re
import undetected_chromedriver as uc
import json
import arrow
import os

session = requests.Session()
headers = {
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36'
}
FILE_SOURCE  = "auto/new_data"
FILE_DESTINATION = "auto/data"
FILE_PREVIOUS = "auto/previous_data"

def move_file(FILE_DESTINATION, FILE_PREVIOUS, file_name):
    source_path = f"{FILE_DESTINATION}/{file_name}"
    destination_path = f"{FILE_PREVIOUS}/{file_name}"
    
    if os.path.exists(source_path):
        os.replace(source_path, destination_path)
        print(f"\033[7;34m'{source_path}' -> '{destination_path}' successfully!\033[0m")
    else:
        print(f"Error: '{source_path}' does not exist.")


def get_data1(filepath:str, data_type:str):
    '''import/export'''
    signal = 1
    while signal:
        tmp = round(datetime.now().timestamp()*1000)
        res = session.get(f'https://portal.sw.nat.gov.tw/APGA/Captcha_validNumGenerate?time={tmp}', stream = True, verify = False)
        f = open(f'{filepath}check.png', 'wb')
        shutil.copyfileobj(res.raw, f)
        f.close()

        ocr = ddddocr.DdddOcr()
        with open(f'{filepath}check.png', 'rb') as f:
            img_bytes = f.read()
        code = ocr.classification(img_bytes)

        '''防呆code'''
        if len(code) == 6:
            signal = 0
            for char in code:
                if ord(char) > 57:
                    signal = 1
                    break
    payload = {
    'checkCaptcha': code,
    'language': 'chinese'
    }

    if data_type == 'import': 
        TypePort = '3'
    else:
        TypePort ='6'

    payload = {'pStartyear': '92',
        'pEndyer': '113',
        'pStartmonth': '1',
        'pEndmonth': '1',
        'pGtNote': '',
        'pColSeq': '進出口別 / 日期 / 貨品別 / 國家(地區)別',
        'pCnyList': '中國大陸',
        'minYear': '92',
        'maxYear': '113',
        'maxMonth': '8',
        'minMonth': '1',
        'maxYearByYear': '113',
        'searchInfo.TypePort': TypePort,
        'searchInfo.TypeTime': '0',
        'searchInfo.StartYear': '92',
        'searchInfo.StartMonth': '1',
        'searchInfo.EndYear': '113',
        'searchInfo.EndMonth': '1',
        'searchInfo.goodsName': '21',
        'searchInfo.goodsType': '2',
        'searchInfo.goodsCodeGroup': '8207602000',
        'searchInfo.groupType': '2',
        'searchInfo.CountryName': '中國大陸',
        'searchInfo.Type': '1',
        'searchInfo.OrderType': '進出口別 / 日期 / 貨品別 / 國家(地區)別',
        'searchInfo.ExportType': 'web',
        'searchInfo.Captcha': code
    }

    res = session.post('https://portal.sw.nat.gov.tw/APGA/GA30_LIST', data = payload,  verify = True, headers = headers)
    soup = BeautifulSoup(res.text, "html.parser")
    # Parse the HTML content using BeautifulSoup
    soup = BeautifulSoup(res.content, 'lxml')

    # Find the table that contains the monthly import/export data
    table = soup.find('table', {'id': 'dataList'})

    # Create a list to hold the data
    data = []

    # Iterate through the rows of the table and extract data
    for row in table.find_all('tr')[1:]:  # Skip the header row
        columns = row.find_all('td')
        month_data = {
            "category": columns[0].text.strip(),
            "date": columns[1].text.strip().split('\n')[0],
            "中文貨名":columns[3].text.strip().split('\n')[0],
            "國家": columns[5].text,
            f"{data_type}_美元": columns[6].text.strip()
        }
        data.append(month_data)

    return pd.DataFrame(data)

def get_data2(GEO:str, query:str): 
    '''中國:CN、印度: IN、馬來西亞:MA、土耳其:TR、美國：US'''
    pytrends = TrendReq(hl='en-US', tz=360, timeout = None)
    # kw_list = ['工具機', '控制器', 'Machine tool', 'controller']
    kw_list = [f'{query}']

    '''取得日曆'''
    # Define start and end dates
    start_date = datetime(2012, 1, 1)
    start_date =  arrow.get('2012-01-01', 'YYYY-MM-DD')
    # end_date = datetime(2024, 12, 31)
    tmp = datetime.today()
    # end_date = datetime(tmp.year, tmp.month, tmp.day)
    end_date = arrow.now()

    # Initialize an empty list to store the dates
    date_list = []

    # Loop through each date from start to end
    current_date = start_date
    while current_date <= end_date:
        # Append the current date to the list (formatted as Year-Month-Day)
        date_list.append(current_date)
        # Increment by one day
        current_date = current_date.shift(months=1)

    '''每日數據, 如果直接抓超過3月以上會變成每周取一天'''
    df = pd.DataFrame()
    # for i in tqdm(range(0,5)):
    for i in tqdm(range(0,len(date_list))):
        pytrends.build_payload(kw_list, cat=0, timeframe = f"{date_list[i].format('YYYY-MM-DD')} {date_list[i].ceil('month').format('YYYY-MM-DD')}", geo = GEO, gprop='')
        tmp = pytrends.interest_over_time()
        df = pd.concat([tmp, df])
        if i%10 == 0 and i!=0:
            time.sleep(20)
    df = df.sort_index()
    return df

def get_data3(lastet_month:str, function_type = 1):
    if function_type == 0:
        '''lastest_month: 11308'''
        payload = {
        '__EVENTTARGET':'', 
        '__EVENTARGUMENT': '',
        '__LASTFOCUS': '',
        '__VIEWSTATE': '',
        '__VIEWSTATEGENERATOR': 'D99B2448',
        '__SCROLLPOSITIONX': '0',
        '__SCROLLPOSITIONY': '200',
        '__EVENTVALIDATION': '',
        'ctl00$hldContent$ddlPeriod': 'M',
        'ctl00$hldContent$ddlDateBeg': '10001',
        'ctl00$hldContent$ddlDateEnd': lastet_month,
        'ctl00$hldContent$hidColCount': '2',
        'ctl00$hldContent$hidRowCount': '3',
        'ctl00$hldContent$ddlDateKind': '民國',
        'ctl00$hldContent$ddlYear': '112',
        'ctl00$hldContent$ddlQuarterMonth': '09',
        'ctl00$hldContent$ddlYearLines': '0',
        'ctl00$hldContent$chkMonth': 'on',
        'ctl00$hldContent$ddlMonthLines': '164',
        'ctl00$hldContent$btnQuery': '查詢',
        'ctl00$hldContent$ddlReportType': 'XLS'
        }
        res = requests.post('https://dmz26.moea.gov.tw/GA/common/Common.aspx?code=N&no=18', data = payload, headers = headers, verify = False)
    else:
        res = requests.post('https://dmz26.moea.gov.tw/GA/common/Common.aspx?code=N&no=18', headers = headers, verify = False)

    soup = BeautifulSoup(res.content, 'lxml')

    # Find the relevant table
    table = soup.find('table')  # Modify this if the table has specific classes/IDs

    # Extract rows
    rows = []
    for tr in table.find_all('tr'):
        row = []
        for td in tr.find_all('td'):
            row.append(td.text.strip())
        if row:
            row = [item.replace(' ','').replace('...','') for item in row]
            rows.append(row)

    rows[1] = [item.replace('\xa0', '').replace('\u3000', '').strip() for item in rows[1]]
    rows[1].insert(1,' ')

    # Create a DataFrame
    df = pd.DataFrame(rows)
    df.columns = rows[1]
    df = df[3:].copy()
    df = df[:-3].copy()
    df = df.reset_index(drop = True)

    time_list = []
    for i in range(0,len(df)):
        if '年' in df.iloc[i]['年度別']:
            tmp = df.iloc[i]['年度別']
        time_list.append(tmp + df.iloc[i][' '])
    df['日期'] = time_list
    if function_type == 1:
        df = df.drop(df[df[' '] == ''].index[0])
    df['日期'] = df['日期'].apply(lambda x: str(int(x.split('年')[0])+1911) +'0'+str(x.split('年')[1].split('月')[0]) if int(x.split('年')[1].split('月')[0])<10 else str(int(x.split('年')[0])+1911) + str(x.split('年')[1].split('月')[0]))

    del df['年度別']
    del df[' ']
    df.index = df['日期']
    del df['日期']

    df = df.applymap(lambda x: np.nan if x == '' else x)
    df = df.astype(float)
    df = df[df.columns[:-1]].copy()
    print('完成爬蟲!')

    return df

def get_data4():

    # 所公告的研發計畫
    end = 7
    plans1 = []
    for i in range(1,end):
        res = requests.get(f'https://tiip.itnet.org.tw/news_list.php?m=1&page={i}')

        soup = BeautifulSoup(res.text, "html.parser")
        # Parse the HTML content using BeautifulSoup
        soup = BeautifulSoup(res.content, 'lxml')

        # Find all rows in the table
        rows = soup.find_all("tr")[2:]  # Skip the header row

        # Extract the necessary information: 公佈時間, 標題, and URL
        for row in rows:
            columns = row.find_all("td")
            pub_date = columns[1].text.strip()
            title = columns[2].text.strip()
            link = 'https://tiip.itnet.org.tw/'+columns[2].find("a")["href"]
            plans1.append({"公佈時間": pub_date, "標題": title, "連結": link})

    # 所有計畫核定名單
    # '''version2'''
    end = 90
    plans2 = []
    for i in tqdm(range(1,end)):
        try:
            res = requests.get(f'https://tiip.itnet.org.tw/achievementList.php?year=&kw=&page={i}')
        except:
            break

        # soup = BeautifulSoup(res.text, "html.parser")
        # Parse the HTML content using BeautifulSoup
        soup = BeautifulSoup(res.content, 'lxml')

        # Find all rows in the table
        rows = soup.find_all("tr")[2:]  # Skip the header row

        # Extract the necessary information: 公佈時間, 標題, and URL
        for row in rows:
            columns = row.find_all("td")
            company_name = columns[3].text.strip()
            plans_name = columns[4].text.strip()
            category_name = columns[5].text.strip()
            date = columns[2].text.strip()
            plans_type = columns[1].text.strip()
            # link = 'https://tiip.itnet.org.tw/'+columns[2].find("a")["href"]
            plans2.append({"計畫種類": plans_type, "公司名稱": company_name, "計畫名稱": plans_name, "核定日期": date, "主題式名稱" : category_name})
    return pd.DataFrame(plans2)

def get_data5(GEO:str, formatted_time):
    '''中國:china、印度: india、馬來西亞:malaysia、土耳其:turkey、美國：united-states'''
    options = Options() 
    # options.add_argument('--headless=new')  # 啟動Headless 無頭
    options.add_argument('--disable-gpu')
    driver = webdriver.Chrome(options = options)
    driver.get(f'https://tradingeconomics.com/{GEO}/indicators')
    updated_items = driver.find_elements(By.XPATH, '//*[@id="pagemenutabs"]')[0].text.split()
    time.sleep(3)
    macro = driver.find_elements(By.XPATH, '//*[@id="pagemenutabs"]')[0].text.split('\n')[:-1]
    rows = []
    for l in range(0, len(macro)):
        driver.find_element(By.XPATH, f'//*[@id="pagemenutabs"]/li[{l+1}]/a').click()
        data = driver.find_elements(By.XPATH, f'//*[@id="{macro[l].lower()}"]/div/div/table/tbody')[0].text.replace('30 Year Mortgage Rate', 'thirty Year Mortgage Rate').replace('15 Year Mortgage Rate', 'fifteen Year Mortgage Rate').replace('Michigan 5 Year Inflation Expectations', 'Michigan five Year Inflation Expectations').replace('4-week','four-week').replace('1 Year MLF Rate', 'one Year MLF Rate').replace('14-Day Reverse Repo Rate', 'fourteen-Day Reverse Repo Rate').replace('Loan Prime Rate 5Y', 'Loan Prime Rate five-Y').split('\n')

        for i in range(0,len(data)):
            tmp = data[i].split(' ')
            name = ''
            unit = ''
            notice_date = ''
            last = ''
            previous = ''
            highest = ''
            lowest = ''
            signal = 0
            pre = 0
            for j in range(0,len(tmp)):
                # j = pre
                if signal == 0:
                    if ord(tmp[j][0])>=65: # name
                        name += tmp[j]+' '
                    else: # 數字們
                        signal = 1
                        k = j

                if signal == 1 and ord(tmp[j][0])>=65:
                    if '/' not in tmp[j]:
                        unit += tmp[j]+' '
                    else:
                        signal = 2
                        pre = j
                if signal == 2:
                    if '/' in tmp[j]:
                        notice_date = tmp[j]
                
                
            name = name[:-1]
            unit = unit[:-1]

            try:
                if '/' not in tmp[k+1] and ord(tmp[k+1][0])<65:
                    previous += tmp[k+1]
                else:
                    previous = ''
            except:
                previous = ''
            
            try:
                if '/' not in tmp[k+2] and ord(tmp[k+2][0])<65:
                    highest += tmp[k+2]
            except:
                highest = ''
            
            try:
                if '/' not in tmp[k+3]and ord(tmp[k+3][0])<65:
                    lowest += tmp[k+3]
            except:
                lowest = ''
            
            if 'Stock' in name or 'Currency' in name:
                rows.append({'總經種類':macro[l],'指標名稱':name, 'Last':tmp[k], 'Previous': previous, 'Higest': highest, 'Lowest': lowest, '單位': unit, '公告日期': formatted_time})
            else:    
                rows.append({'總經種類':macro[l],'指標名稱':name, 'Last':tmp[k], 'Previous': previous, 'Higest': highest, 'Lowest': lowest, '單位': unit, '公告日期': notice_date})
    data = pd.DataFrame(rows)
    return data, updated_items

def get_data6():
    '''中國:china、印度: india、馬來西亞:malaysia、土耳其:turkey、美國：usa ##土耳其資料壞了'''
    GEOs = ['china', 'india', 'malaysia', 'usa']
    for GEO in GEOs:
        driver = webdriver.Chrome()
        print(GEO)
        driver.get(f'https://www.imd.org/entity-profile/{GEO}-wcr/#_yearbook_Economic%20Performance')
        driver.maximize_window()
        length = "window.scrollBy(0,500)"
        driver.execute_script(length)
        time.sleep(2)

        total_ranking = driver.find_elements(By.XPATH,'//*[@id="page-content"]/div/div[3]/div/div[3]/div/div[2]/div/div/div')[0].text.split()
        total_ranking.insert(0,'')

        rankings = [{'年分': total_ranking[i],'名次': total_ranking[i+1]}for i in range(0,len(total_ranking)) if i%3 == 1 ]

        records = []
        for j in range(1,5):
            tmp = driver.find_elements(By.XPATH,f'//*[@id="page-content"]/div/div[3]/div/ul/li[{j}]')[0].text.split('\n')

            terms    = tmp[0]
            position = tmp[1].split(' | ')[0].split(': ')[1][:-3]
            score    = tmp[1].split(' | ')[1].split(': ')[1]
            history  = [tmp[i] for i in range(2,len(tmp)-3) if i%2 == 1] 

            records.append({'terms':terms, f"score_{rankings[-1]['年分']}":score,
                            f"{rankings[-5]['年分']}":history[-4], f"{rankings[-4]['年分']}":history[-3], f"{rankings[-3]['年分']}":history[-2], f"{rankings[-2]['年分']}":history[-1], f"{rankings[-1]['年分']}":position}) 

        DF = pd.DataFrame(records)
        DF.index = DF['terms']
        del DF['terms']
        DF = DF.T
        DF.to_excel(f'{FILE_SOURCE}/6_IMD競爭力指標_{GEO}.xlsx')
    return 1

def get_data7_1():
    res = requests.get('https://www.sse.net.cn/index/singleIndex?indexType=gcspi')
    soup = BeautifulSoup(res.content, 'lxml')
    # Extract the tables from the HTML content
    tables = soup.find_all('table')

    # Function to extract table data
    def parse_table(table, datatype = 0):
        data = []
        rows = table.find_all('tr')

        # Get the headers
        headers = [header.get_text() for header in rows[0].find_all('td')]
        data.append(headers)

        # Get the rest of the rows
        count = 0
        for row in rows[1:]:
            cols = row.find_all('td')
            cols = [ele.get_text(strip=True) for ele in cols]
            if datatype == 1:
                new_cols = [cols[i] for i in [0,1,3]]
            else:
                new_cols = [cols[i] for i in [0,1]]
            data.append(new_cols)
            count+=1
        
        if datatype == 1:
            return pd.DataFrame(data[2:])
        else:
            return pd.DataFrame(data[1:])

    def get_column(datatype, soup):
        text = soup.find_all('div', {'class':'title2'})[datatype].text.split()[0]
        date_pattern = r"\d{4}-\d{2}"
        date_match = re.search(date_pattern, text).group()

        if datatype == 0:
            chinese_content_pattern = r"[\u4e00-\u9fff]+"
            chinese_match = re.search(chinese_content_pattern, text).group()

            return chinese_match, date_match
        else:
            split_content = re.split(r"/", text)

            # Extracting Chinese content before and after '/'
            before_slash = re.findall(r"[\u4e00-\u9fff]+", split_content[0])[0] if len(split_content) > 0 else []
            after_slash = re.findall(r"[\u4e00-\u9fff]+", split_content[1])[0] if len(split_content) > 1 else []
            return before_slash, after_slash, date_match

    # Extract data from both tables
    df_comprehensive = parse_table(tables[0],0)  # Comprehensive Punctuality Index
    df_trunk_routes = parse_table(tables[1],1)   # Global Trunk Routes Punctuality

    chinese_match, date_match = get_column(datatype = 0, soup = soup)
    df_comprehensive.columns = ['指數名稱', chinese_match]
    df_comprehensive[chinese_match+'_time'] = date_match

    before_slash, after_slash, date_match = get_column(datatype = 1, soup = soup)
    df_trunk_routes.columns = ['航線', before_slash, after_slash]
    df_trunk_routes[f'{before_slash}_time'] = date_match
    df_trunk_routes[f'{after_slash}_time'] = date_match

    return df_comprehensive, df_trunk_routes

def get_data7_2():
    driver = webdriver.Chrome()
    driver.get('https://www.sse.net.cn/index/singleIndex?indexType=gcspi_port')
    driver.maximize_window()

    rows = driver.find_elements(By.XPATH, '//*[@id="right"]/table')[0].text.split('\n')
    text = driver.find_elements(By.XPATH, '//*[@id="right"]/div[2]')[0].text
    date_pattern = r"\d{4}-\d{2}"
    date_match = re.search(date_pattern, text).group()

    new_rows = []
    for i in range(4,len(rows)):
        tmp = rows[i].split(' ')
        new_rows.append({'港口': tmp[1], '准班率(%)':tmp[2], '挂靠数':tmp[4], '班期综合服务水平': tmp[6], '在港时间(天)':tmp[7], '在泊時間(天)':tmp[8],
                        '港口_time':date_match, '准班率(%)_time':date_match, '挂靠数_time':date_match, '班期综合服务水平_time':date_match, '在港时间(天)_time':date_match, '在泊時間(天)_time':date_match})

    df = pd.DataFrame(new_rows)
    return df

def get_data7_3():
    res = requests.get('https://www.sse.net.cn/index/singleIndex?indexType=brsti')
    soup = BeautifulSoup(res.content, 'lxml')

    tables = soup.find_all('table')
    rows = tables[0].find_all('tr')

    data = []
    # [header.get_text() for header in rows[1].find_all('td')][0:2]
    for i in range(1,len(rows)):
        data.append([header.get_text() for header in rows[i].find_all('td')][0:2])

    df = pd.DataFrame(data, columns=['指數名稱','指數'])
    df['指數_time'] = soup.find_all('div', {'class':'title2'})[0].text.split()[1]
    return df

def get_data7_4():
    res = requests.get('https://www.sse.net.cn/index/singleIndex?indexType=brtvi')

    soup = BeautifulSoup(res.content, 'lxml')

    tables = soup.find_all('table')
    rows = tables[0].find_all('tr')

    data = []
    for i in range(1,len(rows)):
        data.append([header.get_text() for header in rows[i].find_all('td')][0:2])

    df = pd.DataFrame(data, columns = ['指數名稱', '指數'])
    df['指數_time'] = soup.find_all('div', {'class':'title2'})[0].text.split()[1]

    return df

def get_data7_5():
    driver = webdriver.Chrome()
    driver.get('https://www.sse.net.cn/index/singleIndex?indexType=brcvi')
    driver.maximize_window()

    rows = driver.find_elements(By.XPATH, '//*[@id="right"]/table')[0].text.split('\n')

    data = []
    for i in range(2,len(rows)):
        tmp = rows[i].split(' ')[:-1]
        if len(tmp)<3:
            tmp.insert(1,'')
        data.append(tmp)

    df = pd.DataFrame(data, columns=['指數名稱','權重', '指數'])
    df = df[['指數名稱','指數']]
    df['指數_time'] = driver.find_elements(By.XPATH, '//*[@id="right"]/div[3]')[0].text.split()[2]
    df['指數名稱'].iloc[2:9] = df['指數名稱'].iloc[2:9]+'-出口'
    df['指數名稱'].iloc[10:17] = df['指數名稱'].iloc[10:17]+'-進口'
    return df

def get_data7_6():
    driver = webdriver.Chrome()
    driver.get('https://www.sse.net.cn/index/singleIndex?indexType=srfi')
    driver.maximize_window()

    rows = driver.find_elements(By.XPATH, '//*[@id="right"]/table')[0].text.split('\n')

    data = []
    for i in range(2,len(rows)):
        tmp = rows[i].split(' ')[:-1]
        if len(tmp)<3:
            tmp.insert(1,'')
        data.append(tmp)

    df = pd.DataFrame(data, columns=['指數名稱','權重', '指數'])
    df = df[['指數名稱','指數']]
    df['指數名稱'].iloc[2:7] = df['指數名稱'].iloc[2:7]+':進口'
    df['指數名稱'].iloc[8:13] = df['指數名稱'].iloc[8:13]+':出口'
    df['指數_time'] = driver.find_elements(By.XPATH, '//*[@id="right"]/div[3]')[0].text.split()[2]

    return df

def scroll_down(driver):
    elem = driver.find_element(By.TAG_NAME, "html")
    elem.send_keys(Keys.END)

def get_data8_1(query:str, forums:list):
    '''
    query: siemens, fanuc, syntec, searching name
    forum: [Machinists, robotics], a list of str
    '''
    driver = webdriver.Chrome()
    driver.maximize_window()
    
    # 獲得 title & 網址
    results = []
    for forum in forums:
        signal = 1
        i = 0
        print(f'{forum}')
        driver.get(f'https://www.reddit.com/r/{forum}/search/?q={query}&type=link&cId=fc7a58b4-f24e-42e5-b633-51c75a99c047&iId=46e77d77-e6e8-4434-94f3-4dcbed0ada05')
        time.sleep(2)
        while signal:
            scroll_down(driver)
            time.sleep(2)
            tmp = driver.find_elements(By.XPATH, '//*[@id="main-content"]/div/reddit-feed/faceplate-tracker')
            j = i
            if j+1 >= len(tmp):
                signal = 0
                break
            for i in range(j+1,len(tmp)):
                title = tmp[i].text.split('\n')[0]
                if i > 1:
                    if results[-1]['title'] == title:
                        signal = 0
                        break
                date = driver.find_elements(By.XPATH, f'//*[@id="main-content"]/div/reddit-feed/faceplate-tracker[{i}]/post-consume-tracker/div/div/div[1]/span/faceplate-timeago/time')[0].get_attribute('datetime')
                website = driver.find_elements(By.XPATH, f'//*[@id="main-content"]/div/reddit-feed/faceplate-tracker[{i}]/post-consume-tracker/div/faceplate-tracker/h2/a')[0].get_attribute('href')
                results.append({'forum':forum,'title':title,'date': date,'website':website})
    
    df = pd.DataFrame(results)
    return df

def get_data8_2(filename:str):
    '''ex.8_競品分析_fanuc.xlsx'''
    results = pd.read_excel(filename)
    driver = webdriver.Chrome()
    driver.maximize_window()
    all_questions = []
    all_comments = []
    # for i in tqdm(range(0,5)):
    for i in tqdm(range(0,len(results))):
        driver.get(results['website'][i])
        time.sleep(1)
        # print(len(driver.find_elements(By.CLASS_NAME, 'text-neutral-content')))
        if len(driver.find_elements(By.CLASS_NAME, 'text-neutral-content')) > 4:
            question = driver.find_elements(By.CLASS_NAME, 'text-neutral-content')[4].text.split('\n')
        else:
            question = ['']

        all_questions.append(question)
        
        pre_count = 0
        while 1:
            scroll_down(driver = driver)
            time.sleep(1)
            comments = driver.find_elements(By.XPATH, '//*[@id="-post-rtjson-content"]')
            if pre_count == len(comments):
                break
            pre_count = len(comments)
        comment = ''
        for tmp in comments:
            tmp = tmp.text.split('\n')
            for j  in range(len(tmp)):
                comment += tmp[j]
        all_comments.append(comment)

    all_questions_paragraph = ''
    for i in range(0,len(all_questions)):
        tmp = all_questions[i]
        for j in range(0,len(tmp)):
            all_questions_paragraph += tmp[j]

    all_comments_paragraph = ''
    for i in range(0,len(all_comments)):
        tmp = all_comments[i]
        for j in range(0,len(tmp)):
            all_comments_paragraph += tmp[j]

    return [all_questions_paragraph, all_comments_paragraph]

def get_data8_3():
    '''文字雲'''
    querys = ['syntec','fanuc','siemens']
    sources = ['title', 'subtitle', 'content']

    for query in querys:
        results = pd.read_excel(f'{FILE_DESTINATION}/8_競品分析_{query}.xlsx')
        for source in sources:
            text1 = ''
            text2 = ''
            text3 = ''
            text = ''
            if 'title' in sources:
                text = pd.DataFrame(results)[f'title'].values
                for tmp in text:
                    text1+=tmp
            if 'subtitle' in sources:
                with open(f'{FILE_DESTINATION}/8_{query}_questions.txt', encoding='utf-8') as f:
                    text2 = f.read()
            if 'content' in sources:
                with open(f'{FILE_DESTINATION}/8_{query}_comments.txt', encoding='utf-8') as f:
                    text2 = f.read()

            texts = text1 + text2 + text3 
            wordcloud = WordCloud(scale=5, colormap='coolwarm', background_color='white').generate(texts)
            # wordcloud = WordCloud().generate(texts)

            # 繪圖
            plt.figure(figsize=(20, 9), dpi=100)
            plt.imshow(wordcloud, interpolation="bilinear")
            plt.axis("off")

            # Save the figure with no extra white space around it
            plt.savefig(f'static/{query}_{source}.png', bbox_inches='tight', pad_inches=0)
    return '文字雲圖片更新完成'

def get_data9_1():

    driver = webdriver.Chrome()
    driver.maximize_window()
    url = 'https://www.lme.com/Metals/Ferrous'
    # url = 'https://www.lme.com/Metals/Non-ferrous'
    driver.get(f'{url}')

    scroll_down(driver)

    start = 60
    end = 90
    output = driver.find_elements(By.XPATH, '//*[@href]')
    links = []
    for i in range(start, end+1):
        link = output[i].get_attribute('href')
        links.append(link)
    links = [link for link in links if 'ferrous/' in link or 'Ferrous/' in link]
    del links[8]


    try:
        path_update = f'{FILE_SOURCE}/9_1原料價格.json'
        jsonFile = open(path_update,'r')
        f =  jsonFile.read()   # 要先使用 read 讀取檔案
        DAta = json.loads(f)
        jsonFile.close()
    except:
        DAta = {}

    DAta = {
        'Non-ferrous':{},
        'Ferrous':{}
    }

    # for k in range(0,1):
    for k in range(0,len(links)):

        driver.get(f'{links[k]}')
        topic = links[k].split('/')[-1]
        for key in DAta.keys():
            if key in links[k]:
                Data = DAta[key]
        Data[topic] = {}
        data = Data[topic] # 傳位子!!
        length = "window.scrollBy(0,500)"
        driver.execute_script(length)
        time.sleep(2)

        number_loc = len(driver.find_elements(By.XPATH, '//*[@id="dataset-tab-0"]/div/div[2]/div[2]/div[*]'))
        date = driver.find_element(By.XPATH, '//*[@id="dataset-tab-0"]/div/div[1]/span[3]').text.split(' ')
        # 取出日、月、年
        day = date[3]
        month = date[4]
        year = date[5]

        # 使用 arrow 解析日期並格式化為 DD/MM/YYYY
        date_str = f"{day} {month} {year}"
        parsed_date = arrow.get(date_str, "DD MMM YYYY")
        formatted_date = parsed_date.format("YYYY/MM/DD")

        if number_loc == 1:
            number_loc+=1
        for loc in range(1,number_loc): # 不用匯率
            output = driver.find_elements(By.XPATH, f'//*[@id="dataset-tab-0"]/div/div[2]/div[2]/div[{loc}]')[0].text
            data_list = output.split('\n')
            for i in range(0,len(data_list)):
                if i == 0:
                    name = data_list[i]
                    data[name] = {}
                    data[name]['date'] = [] 
                elif i == 1:
                    if loc != 4:
                        columns = data_list[i].split(' ')
                    else:
                        columns = ['CONTRACT', 'PRICE']
                        if k!=0 and k!=2:
                            values = data_list[i].rsplit(' ', 1)

                    for column in columns:
                        data[name][column] = []
                    
                    if k!=0 and k!=2:
                        if loc == 4:
                            for j in range(0,len(columns)):
                                data[name][columns[j]].append(values[j])
                            data[name]['date'].append(formatted_date)
                else:
                    if loc == 2 or loc == 3 or loc == 4 or k>=8 :
                        values = data_list[i].rsplit(' ', 1)
                    else:
                        values = data_list[i].split(' ')
                        
                    for j in range(0,len(columns)):
                        data[name][columns[j]].append(values[j])
                    data[name]['date'].append(formatted_date)

    json_data = json.dumps(DAta)
    with open(path_update, "w") as json_file:
        json_file.write(json_data)     

    
    return 1

def get_data9_2():
    driver = webdriver.Chrome()
    driver.maximize_window()
    url = 'https://www.lme.com/Metals/Ferrous'
    driver.get(f'{url}')

    scroll_down(driver)

    start = 60
    end = 90
    output = driver.find_elements(By.XPATH, '//*[@href]')
    links = []
    for i in range(start, end+1):
        link = output[i].get_attribute('href')
        links.append(link)
    links = [link for link in links if 'ferrous/' in link or 'Ferrous/' in link]
    del links[8]
    urls = ["/".join(link.split("/")[-2:]) for link in links]

    for k in range(0,len(urls)):
        query = urls[k]
        if k < 8:
            link = f'https://www.lme.com/Metals/{query}#Volume+%26+OI'
        else:
            link = f'https://www.lme.com/Metals/{query}#Volume+and+open+interest'
        driver.get(link)
        driver.maximize_window()
        if k == 3:
            scroll_down(driver)
        time.sleep(1)
        output = driver.find_elements(By.XPATH, '//*[@id="dataset-tab-2"]/div/div[2]/div[2]/div/div/div[1]/table/tbody')[0].text.split('\n')

        df = {}
        df['CONTRACT'] = []
        df['VOLUME'] = []
        df['EOI'] = []
        for line in output:
            terms = line.rsplit(' ', 2)
            df['CONTRACT'].append(terms[0])
            df['VOLUME'].append(terms[1])
            df['EOI'].append(terms[2])    

        df = pd.DataFrame(df)
        df['date'] = driver.find_elements(By.XPATH, '//*[@id="dataset-tab-2"]/div/div[2]/div[1]/div/input')[0].get_attribute("max").replace('-','/')
        df.to_excel(f"{FILE_SOURCE}/9_2_{query.replace('/','_')}.xlsx")
    return 1
    
def get_data_10():
    airpots = ['PVG', 'KUL', 'DEL', 'IST', 'DXB', 'DEN']
    options = Options()
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36")
    driver = webdriver.Chrome(options=options)
    driver.get('https://globe.adsbexchange.com/')
    driver.maximize_window()
    df = {}
    df['機場'] = []
    df['航班數量'] = []
    for airport in airpots:
        searching_airport = airport
        driver.find_elements(By.XPATH, '//*[@id="jump_input"]')[0].send_keys(searching_airport)
        driver.find_elements(By.XPATH,'//*[@id="jump_form"]/button[1]')[0].click()
        time.sleep(2)
        num = driver.find_element(By.XPATH, '//*[@id="dump1090_total_ac_positions"]').text
        df['機場'].append(searching_airport)
        df['航班數量'].append(num)
    df = pd.DataFrame(df)
    df['時間'] = [pd.to_datetime(datetime.now())]*len(df)
    df.index = df['時間']
    del df['時間']
    return df

def get_data_12():
    url = 'https://www.macromicro.me/charts/117199/global-share-of-international-payments-via-swift-by-major-currency'
    driver = uc.Chrome()
    driver.get(url)
    time.sleep(5)
    data = driver.find_elements(By.XPATH,'//*[@id="ccApp"]/div/div[2]/div[1]/div/div/div[2]/div[4]/ul')[0].text.split()
    df = {
        '幣別':[],
        '最新公告時間':[],
        '占比':[],
        # '前一期':[]
    }
    for i in range(0,len(data), 4):
        df['幣別'].append(data[i])
        df['最新公告時間'].append(data[i+1])
        df['占比'].append(data[i+2])
        # df['前一期'].append(data[i+3])

    df = pd.DataFrame(df)
    test = [float(tmp[:-1]) for tmp in df.iloc[1:]['占比']]
    df.iloc[0]['占比'] = str(round(100-np.sum(test),2))+'%'
    df.iloc[0]['最新公告時間'] = df.iloc[1]['最新公告時間']
    return df   

def get_data13(query):
    file_name = '13_TradingEconomics.json'
    url = f'https://tradingeconomics.com/{query}'
    headers = {
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36'
    }

    res = requests.get(url, headers = headers)
    soup = BeautifulSoup(res.content, 'lxml')

    columns = []
    data_column = soup.find_all('th',{'class':'te-sort'})
    for i in range(len(data_column)):
        tmp = data_column[i].text.strip()
        columns.append(tmp)


    DF = []
        
    data_tables = soup.find_all('table')
    for i in range(0,len(data_tables)):
        data_table = data_tables[i]

        # Extract rows and columns
        rows = []
        for row in data_table.find_all('tr')[1:]:
            cols = row.find_all('td')
            if query == 'stocks':
                cols = [col.text.strip() for col in cols][1:][:-1]
            elif query == 'currencies' or query == 'bonds':
                cols = [col.text.strip() for col in cols][1:]
            else:
                cols = [col.text.strip() for col in cols]
            rows.append(cols)

        # Convert to a pandas DataFrame
        differnet = 0
        if query == 'bonds':
            num = 8
        elif query == 'crypto':
            if i == 0:
                num = 10
            else:
                num = 9
                differnet = 1
        else:
            num = 9

        df = pd.DataFrame(rows, columns = columns[(i*num+differnet):(i*num)+num+differnet])
        df['time'] = datetime.now().strftime("%H:%M:%S")
        DF.append(df)

    # 開啟json
    try:
        path_update = f'{FILE_DESTINATION}/{file_name}'
        jsonFile = open(path_update,'r')
        f =  jsonFile.read()   # 要先使用 read 讀取檔案
        df_update = json.loads(f)
        jsonFile.close() 
        data = df_update
    except:
        data = {}

    move_file(FILE_DESTINATION, FILE_PREVIOUS, file_name)
    if query not in data.keys():
        data[query] = {}
    for i in range(0,len(DF)):
        if query == 'commodities':
            for j in range(len(DF[i].iloc[:,0].values)):
                text = DF[i].iloc[:,0].values[j]
                DF[i].iloc[:,0].values[j] = re.sub(r'\n\n', ',', text.strip())

        for tmp in DF[i].iloc[:,0].values:
            if tmp not in data[query].keys():
                data[query][tmp] = {}
                if query != 'bonds':
                    data[query][tmp]['Price'] = []
                data[query][tmp]['%'] = []
                data[query][tmp]['Day'] = []
                data[query][tmp]['Weekly'] = []
                data[query][tmp]['Monthly'] = []
                data[query][tmp]['YTD'] = []
                data[query][tmp]['YoY'] = []
                data[query][tmp]['Date'] = []
                data[query][tmp]['time'] = []

                if query == 'bonds':
                    data[query][tmp]['Yield'] = []
                if query == 'crypto':
                    data[query][tmp]['MarketCap'] = []
            
            if DF[i][DF[i][DF[i].columns[0]] == tmp]['Date'].values[0] in data[query][tmp]['Date'] and DF[i][DF[i][DF[i].columns[0]] == tmp]['time'].values[0] in data[query][tmp]['time']:
                break
            
            for column in DF[i].columns[1:]:
                data[query][tmp][column].append(DF[i][DF[i][DF[i].columns[0]] == tmp][column].values[0])

    json_data = json.dumps(data)
    with open(path_update, "w") as json_file:
        json_file.write(json_data)

    return 1

def get_data14():
    i = 0
    url = f'https://xl.16888.com/month-{i}.html'
    headers = {
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36'
    }

    res = requests.get(url, headers = headers)
    soup = BeautifulSoup(res.content, 'lxml')
    page_row = soup.find_all('div',{'class':"xl-data-pageing lbBox"})[0]
    last_page = int(page_row.find_all('a')[-2].text)


    data = []

    for i in range(0, last_page):    
        url = f'https://xl.16888.com/month-{i}.html'

        res = requests.get(url, headers = headers)
        soup = BeautifulSoup(res.content, 'lxml')

        table = soup.find("table", {"class": "xl-table-def xl-table-a"})
        rows = table.find_all("tr")

        for row in rows[1:]:  # Skip header row
            cols = row.find_all("td")
            time = cols[0].text.strip()
            sales = int(cols[1].text.strip())
            yoy = cols[2].text.strip()[:-1]
            data.append([time, sales, yoy])

    df = pd.DataFrame(data, columns=["时间", "销量", "同比"]).drop_duplicates().sort_values('时间', ignore_index = True)
    df.to_excel(f'{FILE_SOURCE}/14_中國汽車銷量.xlsx')

if __name__ == '__main__':

    # # 1: 進出口總值
    # GEO = '中國大陸'
    # data_import = get_data1('import')
    # data_export = get_data1('export')
    # test = pd.merge(data_import, data_export, how = 'outer', on = 'date')
    # def convert_roc_to_gregorian(roc_date):
    #     # Split year and month
    #     year_str, month_str = roc_date.split('年')
    #     year = int(year_str)
    #     month = int(month_str.replace('月', ''))
        
    #     # Convert ROC year to Gregorian year
    #     gregorian_year = year + 1911
        
    #     # Return as formatted string
    #     return f"{gregorian_year}-{month:02d}"

    # # Apply the conversion to the dataframe
    # test['gregorian_date'] = test['date'].apply(convert_roc_to_gregorian)
    # test = test.sort_values('gregorian_date')
    # test.to_excel(f'new_data/1_{GEO}_進出口總值(美元).xlsx')

    # 2: google_trend
    GEOs = ['CN', 'IN', 'MA', 'TR', 'US']
    querys = ['controller', 'machine tool']
    for GEO in GEOs:
        for query in querys:
            df = get_data2(GEO, query = query)
            df.to_excel(f'{FILE_SOURCE}/2_google_{GEO}_{query}.xlsx')
            time.sleep(10)

    # 3:　主要國家工業生產增加率
    # lastet_month = '11308'
    # df = get_data3(lastet_month)
    # df.to_excel('new_data/3_主要國家工業生產增加率.xlsx')

    # 4: 政府推動計畫名單
    # df = get_data4()
    # df.to_excel('new_data/4_政府推動計畫名單.xlsx', index = 0)

    # 5: 經濟數據
    # GEO = 'united-states'
    # df = get_data5(GEO)
    # df.to_excel(f'new_data/5_經濟數據_{GEO}.xlsx', index = 0)

    # 6: IMD 競爭力指標
    # GEO = 'usa'
    # df = get_data6(GEO)
    # df.to_excel(f'new_data/6_IMD競爭力指標_{GEO}.xlsx')

    # 7-1: 主幹航線準確率
    # df1, df2 = get_data7_1()
    # df1.to_excel(f'{FILE_SOURCE}/7_上海航運交易所_全球主幹航線綜合準班率指數.xlsx', header = 0, index = 0)
    # df2.to_excel(f'{FILE_SOURCE}/7_上海航運交易所_全球主幹航線到離港與收發獲準班率指數.xlsx', header = 0, index = 0)

    # 7-2: 港口班輪準確率
    # df = get_data7_2()
    # df.to_excel('new_data/7_上海航運交易所_港口班輪準確率.xlsx', index = 0)

    # 7-3: 一帶一路航貿指數
    # df = get_data7_3()
    # df.to_excel('new_data/7_上海航運交易所_一帶一路航貿指數.xlsx', index = 0)

    # 7-4: 一帶一路貿易額指數
    # df = get_data7_4()
    # df.to_excel('new_data/7_上海航運交易所_一帶一路貿易額指數.xlsx', header = 0, index = 0)

    # 7-5: 集裝箱海運量指數
    # df = get_data7_5()
    # df.to_excel('new_data/7_上海航運交易所_集裝箱海運量指數.xlsx', header = 0, index = 0)

    # 7-6: 海上絲綢之路運價指數
    # df = get_data7_6()
    # df.to_excel('new_data/7_上海航運交易所_海上絲綢之路運價指數.xlsx', header = 0, index = 0)

    # 8_1: reddit相關搜尋之網址及標題
    # query = 'fanuc'
    # forums = ['Machinists','robotics']
    # df = get_data8_1(query,forums)
    # df.to_excel(f'new_data/8_競品分析_{query}.xlsx', index = False)

    # 8_2: reddit討論主題與評論內容
    # filename = 'new_data/8_競品分析_fanuc.xlsx'
    # output = get_data8_2(filename)
    # names = ['questions','comments']
    # for i in range(0,len(output)):
    #     with open(f"new_data/8_競品分析_fanuc_{names[i]}","w") as file:
    #         file.write(output[i])
    
    # 9_1: 交易價格
    # query = 'LME-Steel-Scrap-CFR-Turkey-Platts'
    # df = get_data9_1(query)
    # df.to_excel(f'new_data/9_1_price_{query}.xlsx')

    # 9_2: 交易量
    # query = 'LME-Steel-Scrap-CFR-Turkey-Platts'
    # df = get_data9_2(query)
    # df.to_excel(f'new_data/9_2_volume_{query}.xlsx')

    # 10:機場吞吐量
    # airport = 'PVG'
    # df = get_data_10(airport)
    # df.to_excel(f'new_data/10_機場吞吐量_{airport}.xlsx')

    # 12: SWIFT
    # df = get_data_12()
    # df.to_excel(f'new_data/12_SWIFT各幣別支付占比.xlsx')